#ifndef COMPUTE_VERTEX_VALUES_COMP
#define COMPUTE_VERTEX_VALUES_COMP

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) buffer Volume {
    uint volume[];
};

layout(set = 0, binding = 1, std140) uniform VolumeDims {
    uvec4 volume_dims;
};

const uvec3[8] index_to_vertex = uvec3[8](
	uvec3(0, 0, 0),
	uvec3(1, 0, 0),
	uvec3(1, 1, 0),
	uvec3(0, 1, 0),
	uvec3(0, 0, 1),
	uvec3(1, 0, 1),
	uvec3(1, 1, 1),
	uvec3(0, 1, 1)
);

float[8] compute_vertex_values() {
    float values[8];
    for (int i = 0; i < 8; ++i) {
        const uvec3 v = index_to_vertex[i];

        const uint voxel = ((gl_GlobalInvocationID.z + v.z) * volume_dims.y + gl_GlobalInvocationID.y + v.y) * volume_dims.x
            + gl_GlobalInvocationID.x + v.x;
        // TODO: later can change this to texelFetch when copyBufferToTexture supports 3D texture
        values[i] = volume[voxel];
    }
    return values;
}

#endif

