#version 450 core

#define CHUNK_SIZE 8
layout(local_size_x = CHUNK_SIZE / 2) in;

layout(set = 0, binding = 0, std430) buffer Data {
    float vals[];
};

layout(set = 0, binding = 1, std430) buffer BlockSums {
    float block_sums[];
};

shared float chunk[CHUNK_SIZE];

void main(void) {
    chunk[2 * gl_LocalInvocationID.x] = vals[2 * gl_GlobalInvocationID.x];
    chunk[2 * gl_LocalInvocationID.x + 1] = vals[2 * gl_GlobalInvocationID.x + 1];

    uint offs = 1;
    // Reduce step up tree
    for (int d = CHUNK_SIZE >> 1; d > 0; d = d >> 1) {
        memoryBarrierShared();
        if (gl_LocalInvocationID.x < d) {
            uint a = offs * (2 * gl_LocalInvocationID.x + 1) - 1;
            uint b = offs * (2 * gl_LocalInvocationID.x + 2) - 1;
            chunk[b] += chunk[a];
        }
        offs = offs << 1;
    }

    // For the multichunk thing we won't want to zero this out I think?
    if (gl_LocalInvocationID.x == 0) {
        block_sums[gl_WorkGroupID.x] = chunk[CHUNK_SIZE - 1];
        chunk[CHUNK_SIZE - 1] = 0;
    }

    // Sweep down the tree to finish the scan
    for (int d = 1; d < CHUNK_SIZE; d = d << 1) {
        offs = offs >> 1;
        memoryBarrierShared();
        if (gl_LocalInvocationID.x < d) {
            uint a = offs * (2 * gl_LocalInvocationID.x + 1) - 1;
            uint b = offs * (2 * gl_LocalInvocationID.x + 2) - 1;
            const float tmp = chunk[a];
            chunk[a] = chunk[b];
            chunk[b] += tmp;
        }
    }

    vals[2 * gl_GlobalInvocationID.x] = chunk[2 * gl_LocalInvocationID.x];
    vals[2 * gl_GlobalInvocationID.x + 1] = chunk[2 * gl_LocalInvocationID.x + 1];
}


